@{
    ViewData["Title"] = "Home Page";
}

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.min.js"></script>

<style>
    .chessboard {
        width: 850px;
        height: 850px;
        background-image: url("/Images/bancotuong.jpg");
        position: absolute;
    }

    .chessnode {
        position: absolute;
        width: 50px;
        height: 50px;
    }

    .chessimgnode {
        width: 50px;
        height: 50px;
    }

    #chat-1 {
        position: absolute;
        right: 6%;
        top: 15%;
    }

    .col-lg-4 .chat-container {
        position: absolute;
        right: 6%;
        top: 15%;
    }
</style>
<div id="app" style="min-height:800px">
<template v-if="userData">
    <div class="chessboard">
        <div v-for="item in chessNode" class="chessnode"
             v-on:dragstart="dragStart"
             v-on:dragend="dragEnd"
             :id="item.id" v-bind:style="{ display: item.visible, top: item.top + 'px', left: item.left + 'px' }">
            <img :src="'/' + item.src" class="chessimgnode" />
        </div>
    </div>
</template>
    <template v-else>
        <button v-on:click="login">Login to play the game</button>
    </template>
</div>
<div id="default-route-url" data-url="@Url.Action("Login", "Home")"></div>

<div class="container">
    <div class="row">
        <div class="col-lg-8 chess-container">
            <div id="app" style="min-height: 800px">
                <template v-if="userData">
                    <div class="chessboard">
                        <div v-for="item in chessNode" class="chessnode"
                             v-on:dragstart="dragStart"
                             v-on:dragend="dragEnd"
                             :id="item.id" v-bind:style="{ display: item.visible, top: item.top + 'px', left: item.left + 'px' }">
                            <img :src="'/' + item.src" class="chessimgnode" />
                        </div>
                    </div>
                </template>
                <template v-else>
                    <button v-on:click="login">Login to play the game</button>
                </template>
            </div>
        </div>
        <div id="chat-1" class="col-lg-4 chat-container chat">
            <div class="chat-messages">
                <ul id="messagesList"></ul>
            </div>
            <div class="chat-input">
                <div class="row p-1 d-none">
                    <div class="col-2">User</div>
                    <div class="col-10"><input type="text" id="userInput" class="form-control" /></div>
                </div>
                <div class="row p-1">
                    <div class="col-2">Message</div>
                    <div class="col-10"><input type="text" id="messageInput" class="form-control" /></div>
                </div>
                <div class="row p-1">
                    <div class="col-12 text-end">
                        <input type="button" id="sendButton" value="Send Message" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>
<script>
    var matrix = [];
    var app = new Vue({
        el: '#app',
        data: {
            chessNode:[],
            top:0,
            left:0,
            userData: JSON.parse(localStorage.getItem('userData')),
        },
        methods: {
            getChessNodes(){
                axios({
                    url: '/api/chess/loadChessBoard',
                    method: 'GET',
                    responseType: 'Json',

                }).then((response) => {
                    this.chessNode = response.data.chessNode;
                    matrix = response.data.matrix;

                });
            },
            getIndexByTopLeft(top, left, matrix){
                var obj = {};
                for(var i = 0; i< matrix.length;i++){
                    for(var j=0;j<matrix[i].length;j++){
                        if (Math.abs(matrix[i][j].top - top) < 20 && Math.abs(matrix[i][j].left - left) < 20){
                            obj.i = i;
                            obj.j = j;
                            obj.id = matrix[i][j].id;
                            return obj;
                        }
                    }
                }
                return null;
            },
            dragStart(event){
                
                this.top = event.clientY;
                this.left = event.clientX;
            },
            dragEnd(event){
                var id = event.currentTarget.id;
                var moveLeft = event.clientX - this.left;
                var moveTop = event.clientY - this.top;

                moveLeft = moveLeft +  event.currentTarget.offsetLeft;
                moveTop = moveTop + event.currentTarget.offsetTop;
                var nodeStart = this.getIndexByTopLeft(event.currentTarget.offsetTop, event.currentTarget.offsetLeft, matrix);
                var nodeEnd = this.getIndexByTopLeft(moveTop, moveLeft, matrix);
                
                if( nodeEnd == null){
                    return;
                    
                }
                var maxtrixNodeEnd = matrix[nodeEnd.i][nodeEnd.j];
                var removeNode = null;
                if (id.indexOf("chutuong") >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    if (!((gapI == 1 && gapJ == 0) || (gapI == 0 && gapJ == 1))) {
                        return;
                    }
                    if (!((nodeEnd.j >= 3 && nodeEnd.j <= 5 && nodeEnd.i >= 0 && nodeEnd.i <= 2) ||
                        (nodeEnd.j >= 3 && nodeEnd.j <= 5 && nodeEnd.i >= 7 && nodeEnd.i <= 9))) {
                        return;
                    }
                    if (maxtrixNodeEnd.id != "") {
                        if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                            || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                            return;
                        }
                        removeNode = {};
                        removeNode.id = maxtrixNodeEnd.id;
                    }
                }
                if (id.indexOf("tinh") >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    if (!(gapI == 2 && gapJ == 2)) {
                        return;
                    }
                    if (maxtrixNodeEnd.id != "") {
                        if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                            || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                            return;
                        }
                        removeNode = {};
                        removeNode.id = maxtrixNodeEnd.id;
                    }
                    if (gapI == 2 && gapJ == 2) {
                        if (nodeEnd.i > nodeStart.i && nodeEnd.j > nodeStart.j && matrix[nodeStart.i + 1][nodeStart.j + 1].id != "") {
                            return;
                        }
                        if (nodeEnd.i < nodeStart.i && nodeEnd.j > nodeStart.j && matrix[nodeStart.i - 1][nodeStart.j + 1].id != "") {
                            return;
                        }
                        if (nodeEnd.i > nodeStart.i && nodeEnd.j < nodeStart.j && matrix[nodeStart.i + 1][nodeStart.j - 1].id != "") {
                            return;
                        }
                        if (nodeEnd.i < nodeStart.i && nodeEnd.j < nodeStart.j && matrix[nodeStart.i - 1][nodeStart.j - 1].id != "") {
                            return;
                        }
                    }
                }
                if (id.indexOf("si") >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    // Quân sĩ chỉ di chuyển chéo và chỉ đi được 1 ô
                    if (!(gapI === 1 && gapJ === 1)) {
                        return;
                    }

                    // Giới hạn quân sĩ trong phạm vi j từ 3 đến 5 và i từ 0 đến 2 hoặc từ 7 đến 9
                    if (!((nodeEnd.j >= 3 && nodeEnd.j <= 5 && nodeEnd.i >= 0 && nodeEnd.i <= 2) ||
                        (nodeEnd.j >= 3 && nodeEnd.j <= 5 && nodeEnd.i >= 7 && nodeEnd.i <= 9))) {
                        return;
                    }

                    if (maxtrixNodeEnd.id != "") {
                        // Kiểm tra xem có quân cờ cùng màu ở vị trí đích không
                        if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                            || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                            return;
                        }
                        // Ghi nhận quân cờ bị ăn bằng cách gán vào removeNode
                        removeNode = {};
                        removeNode.id = maxtrixNodeEnd.id;
                    }
                }
                if (id.indexOf("ma")>=0){
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    var isGameEnded = false;
                    var winningColor = '';
                    if (maxtrixNodeEnd.id.indexOf("chutuong") >= 0) {
                        if (id.indexOf("do") >= 0) {
                            winningColor = 'do'; // Nếu quân tướng đỏ bị ăn mất, quân đen chiến thắng
                        } else if (id.indexOf("den") >= 0) {
                            winningColor = 'den'; // Nếu quân tướng đen bị ăn mất, quân đỏ chiến thắng
                        }
                        isGameEnded = true;
                        var playAgain = window.confirm("Trò chơi kết thúc! Quân " + winningColor + " chiến thắng!\nBạn có muốn tiếp tục chơi không?");
                        if (playAgain) {
                            matrix = [];
                            this.chessNode = [];
                            this.getChessNodes().then((response) => {

                            }).catch((error) => {

                            });
                        } else {
                            // Người chơi chọn thoát hoặc bất kỳ hành động khác
                            // Thực hiện các hành động sau khi thoát, chẳng hạn như đóng trò chơi hoặc chuyển đến trang chính.
                        }
                    }
                    if (!((gapI == 1 && gapJ == 2) || (gapI == 2 && gapJ == 1))){
                        return;
                    }
                    if (maxtrixNodeEnd.id != ""){
                        if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do")>=0)
                            || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                            return;
                        }
                        removeNode = {};
                        removeNode.id = maxtrixNodeEnd.id;
                    }
                    if (gapJ == 1) {
                        if (nodeEnd.i > nodeStart.i && matrix[nodeStart.i + 1][nodeStart.j].id != "") {
                            return;
                        }
                        if (nodeEnd.i < nodeStart.i && matrix[nodeStart.i - 1][nodeStart.j].id != "") {
                            return;
                        }
                    }
                    if (gapI == 1) {
                        if (nodeEnd.j < nodeStart.j && matrix[nodeStart.i][nodeStart.j - 1].id != "") {
                            return;
                        }
                        if (nodeEnd.j > nodeStart.j && matrix[nodeStart.i][nodeStart.j + 1].id != "") {
                            return;
                        }
                    }
                }
                if (id.indexOf("totdo") >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    var isGameEnded = false;
                    var winningColor = '';
                    if (maxtrixNodeEnd.id.indexOf("chutuong") >= 0) {
                        if (id.indexOf("do") >= 0) {
                            winningColor = 'do'; // Nếu quân tướng đỏ bị ăn mất, quân đen chiến thắng
                        } else if (id.indexOf("den") >= 0) {
                            winningColor = 'den'; // Nếu quân tướng đen bị ăn mất, quân đỏ chiến thắng
                        }
                        isGameEnded = true;
                        var playAgain = window.confirm("Trò chơi kết thúc! Quân " + winningColor + " chiến thắng!\nBạn có muốn tiếp tục chơi không?");
                        if (playAgain) {
                            matrix = [];
                            this.chessNode = [];
                            this.getChessNodes().then((response) => {

                            }).catch((error) => {

                            });
                        } else {
                            // Người chơi chọn thoát hoặc bất kỳ hành động khác
                            // Thực hiện các hành động sau khi thoát, chẳng hạn như đóng trò chơi hoặc chuyển đến trang chính.
                        }
                    }
                    if (nodeStart.i < 5) {
                        // Nếu con tốt chưa qua sông, chỉ được đi thẳng và ăn thẳng theo chiều dọc
                        if (nodeEnd.i - nodeStart.i != 1 || gapI > 1 || gapJ > 1 || gapI == gapJ == 1) {
                            return;
                        }
                        if (maxtrixNodeEnd.id != "") {
                            if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                                || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                                return;
                            }
                            removeNode = {};
                            removeNode.id = maxtrixNodeEnd.id;
                        }
                    }
                    else {
                        // Nếu con tốt đã qua sông, có thể di chuyển cả 2 chiều ngang và dọc, mỗi lần chỉ đi 1 ô và không được lùi lại
                        if (nodeEnd.i - nodeStart.i == -1 || gapI > 1 || gapJ > 1 || gapI == gapJ == 1) {
                            return;
                        }
                        if (maxtrixNodeEnd.id != "") {
                            if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                                || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                                return;
                            }
                            removeNode = {};
                            removeNode.id = maxtrixNodeEnd.id;
                        }
                    }
                }
                if (id.indexOf("totden") >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    var isGameEnded = false;
                    var winningColor = '';
                    if (maxtrixNodeEnd.id.indexOf("chutuong") >= 0) {
                        if (id.indexOf("do") >= 0) {
                            winningColor = 'do'; // Nếu quân tướng đỏ bị ăn mất, quân đen chiến thắng
                        } else if (id.indexOf("den") >= 0) {
                            winningColor = 'den'; // Nếu quân tướng đen bị ăn mất, quân đỏ chiến thắng
                        }
                        isGameEnded = true;
                        var playAgain = window.confirm("Trò chơi kết thúc! Quân " + winningColor + " chiến thắng!\nBạn có muốn tiếp tục chơi không?");
                        if (playAgain) {
                            matrix = [];
                            this.chessNode = [];
                            this.getChessNodes().then((response) => {

                            }).catch((error) => {

                            });
                        } else {
                            // Người chơi chọn thoát hoặc bất kỳ hành động khác
                            // Thực hiện các hành động sau khi thoát, chẳng hạn như đóng trò chơi hoặc chuyển đến trang chính.
                        }
                    }
                    if (nodeStart.i > 4) {
                        // Nếu con tốt chưa qua sông, chỉ được đi thẳng và ăn thẳng theo chiều dọc
                        if (nodeEnd.i - nodeStart.i != -1 || gapI > 1 || gapJ > 1 || gapI == gapJ == 1) {
                            return;
                        }
                        if (maxtrixNodeEnd.id != "") {
                            if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                                || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                                return;
                            }
                            removeNode = {};
                            removeNode.id = maxtrixNodeEnd.id;
                        }
                    }
                    else {
                        // Nếu con tốt đã qua sông, có thể di chuyển cả 2 chiều ngang và dọc, mỗi lần chỉ đi 1 ô và không được lùi lại
                        if (nodeEnd.i - nodeStart.i == 1 || gapI > 1 || gapJ > 1 || gapI == gapJ == 1) {
                            return;
                        }
                        if (maxtrixNodeEnd.id != "") {
                            if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                                || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                                return;
                            }
                            removeNode = {};
                            removeNode.id = maxtrixNodeEnd.id;
                        }
                    }
                }
                if (id.indexOf("phao") >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    var isGameEnded = false;
                    var winningColor = '';
                    if (maxtrixNodeEnd.id.indexOf("chutuong") >= 0) {
                        if (id.indexOf("do") >= 0) {
                            winningColor = 'do'; // Nếu quân tướng đỏ bị ăn mất, quân đen chiến thắng
                        } else if (id.indexOf("den") >= 0) {
                            winningColor = 'den'; // Nếu quân tướng đen bị ăn mất, quân đỏ chiến thắng
                        }
                        isGameEnded = true;
                        var playAgain = window.confirm("Trò chơi kết thúc! Quân " + winningColor + " chiến thắng!\nBạn có muốn tiếp tục chơi không?");
                        if (playAgain) {
                            matrix = [];
                            this.chessNode = [];
                            this.getChessNodes().then((response) => {

                            }).catch((error) => {

                            });
                        } else {
                            // Người chơi chọn thoát hoặc bất kỳ hành động khác
                            // Thực hiện các hành động sau khi thoát, chẳng hạn như đóng trò chơi hoặc chuyển đến trang chính.
                        }
                    }
                    var index = 0;
                    if(nodeEnd.i != nodeStart.i && nodeEnd.j != nodeStart.j){
                        return;
                    }
                    // Kiểm tra quân Pháo di chuyển ngang
                    if (nodeStart.i == nodeEnd.i) {
                        if (maxtrixNodeEnd.id != "") {
                            if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                                || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                                return;
                            }
                            for (let j = Math.min(nodeStart.j, nodeEnd.j) + 1; j < Math.max(nodeStart.j, nodeEnd.j); j++) {
                                if (matrix[nodeStart.i][j].id != "") {
                                    index++;
                                }
                            }
                            if(index == 1){
                                removeNode = {};
                                removeNode.id = maxtrixNodeEnd.id;
                            }
                            else{
                                return;
                            }
                        }
                        else{
                            // Kiểm tra xem có quân cờ nào ở giữa trên đường đi của quân Pháo
                            for (let j = Math.min(nodeStart.j, nodeEnd.j) + 1; j < Math.max(nodeStart.j, nodeEnd.j); j++) {
                                if (matrix[nodeStart.i][j].id != "") {
                                    return;
                                }
                            }
                        }
                    }
                    // Kiểm tra quân Pháo di chuyển dọc
                    if (nodeStart.j == nodeEnd.j) {
                        if (maxtrixNodeEnd.id != "") {
                            if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                                || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                                return;
                            }
                            for (let i = Math.min(nodeStart.i, nodeEnd.i) + 1; i < Math.max(nodeStart.i, nodeEnd.i); i++) {
                                if (matrix[i][nodeStart.j].id != "") {
                                    index++;
                                }
                            }
                            if (index == 1) {
                                removeNode = {};
                                removeNode.id = maxtrixNodeEnd.id;
                            }
                            else {
                                return;
                            }
                        }
                        else{
                            // Kiểm tra xem có quân cờ nào ở giữa trên đường đi của quân Pháo
                            for (let i = Math.min(nodeStart.i, nodeEnd.i) + 1; i < Math.max(nodeStart.i, nodeEnd.i); i++) {
                                if (matrix[i][nodeStart.j].id != "") {
                                    return;
                                }
                            }
                        }
                    }
                    
                }
                if (id.indexOf("si") >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    // Quân sĩ chỉ di chuyển chéo và chỉ đi được 1 ô
                    if (!(gapI === 1 && gapJ === 1)) {
                        return;
                    }

                    // Giới hạn quân sĩ trong phạm vi j từ 3 đến 5 và i từ 0 đến 2 hoặc từ 7 đến 9
                    if (!((nodeEnd.j >= 3 && nodeEnd.j <= 5 && nodeEnd.i >= 0 && nodeEnd.i <= 2) ||
                        (nodeEnd.j >= 3 && nodeEnd.j <= 5 && nodeEnd.i >= 7 && nodeEnd.i <= 9))) {
                        return;
                    }

                    if (maxtrixNodeEnd.id != "") {
                        // Kiểm tra xem có quân cờ cùng màu ở vị trí đích không
                        if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                            || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                            return;
                        }
                        // Ghi nhận quân cờ bị ăn bằng cách gán vào removeNode
                        removeNode = {};
                        removeNode.id = maxtrixNodeEnd.id;
                    }
                }
                if (id.indexOf("chutuong") >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);

                    if (!((gapI === 1 && gapJ === 1) || (gapJ === 1 && gapI === 0))) {
                        return;
                    }

                    if (!((nodeEnd.j >= 3 && nodeEnd.j <= 5 && nodeEnd.i >= 0 && nodeEnd.i <= 2) ||
                        (nodeEnd.j >= 3 && nodeEnd.j <= 5 && nodeEnd.i >= 7 && nodeEnd.i <= 9))) {
                        return;
                    }

                    if (maxtrixNodeEnd.id != "") {
                        // Kiểm tra xem có quân cờ cùng màu ở vị trí đích không
                        if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0) ||
                            (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                            return;
                        }
                        // Ghi nhận quân cờ bị ăn bằng cách gán vào removeNode
                        removeNode = {};
                        removeNode.id = maxtrixNodeEnd.id;
                    }
                }
                if (id.indexOf("xe") >= 0) {
                    var gapI = Math.abs(nodeEnd.i - nodeStart.i);
                    var gapJ = Math.abs(nodeEnd.j - nodeStart.j);
                    var isGameEnded = false;
                    var winningColor = '';
                    if (maxtrixNodeEnd.id.indexOf("chutuong") >= 0) {
                        if (id.indexOf("do") >= 0) {
                            winningColor = 'do'; // Nếu quân tướng đỏ bị ăn mất, quân đen chiến thắng
                        } else if (id.indexOf("den") >= 0) {
                            winningColor = 'den'; // Nếu quân tướng đen bị ăn mất, quân đỏ chiến thắng
                        }
                        isGameEnded = true;
                        var playAgain = window.confirm("Trò chơi kết thúc! Quân " + winningColor + " chiến thắng!\nBạn có muốn tiếp tục chơi không?");
                        if (playAgain) {
                            matrix = [];
                            this.chessNode = [];
                            this.getChessNodes().then((response) => {

                            }).catch((error) => {

                            });
                        } else {
                            // Người chơi chọn thoát hoặc bất kỳ hành động khác
                            // Thực hiện các hành động sau khi thoát, chẳng hạn như đóng trò chơi hoặc chuyển đến trang chính.
                        }
                    }
                    if (!(gapI === 0 || gapJ === 0)) {
                        return;
                    }
                    if (maxtrixNodeEnd.id != "") {
                        if ((id.indexOf("do") >= 0 && maxtrixNodeEnd.id.indexOf("do") >= 0)
                            || (id.indexOf("den") >= 0 && maxtrixNodeEnd.id.indexOf("den") >= 0)) {
                            return;
                        }
                        removeNode = {};
                        removeNode.id = maxtrixNodeEnd.id;
                    }
                    if (gapI > 0) {
                        var step = nodeEnd.i > nodeStart.i ? 1 : -1;
                        for (var i = nodeStart.i + step; i !== nodeEnd.i; i += step) {
                            if (matrix[i][nodeStart.j].id !== "") {
                                return;
                            }
                        }
                    } else if (gapJ > 0) {
                        var step = nodeEnd.j > nodeStart.j ? 1 : -1;
                        for (var j = nodeStart.j + step; j !== nodeEnd.j; j += step) {
                            if (matrix[nodeStart.i][j].id !== "") {
                                return;
                            }
                        }
                    }
                }
                var para = [{ id: id, fromi: nodeStart.i, fromj: nodeStart.j, toi: nodeEnd.i, toj: nodeEnd.j }];
                if (removeNode != null){
                    para.push(removeNode);
                }
                axios({
                    url: '/api/chess/movechess',
                    method: 'POST',
                    responseType: 'Json',
                    data: para

                }).then((response) => {
                    

                });

               
            }, login: function () {
                var defaultRouteUrl = document.getElementById('default-route-url').getAttribute('data-url');
                window.location.href = defaultRouteUrl;
            },
        },
        mounted: function () {
            this.getChessNodes();
            var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
            connection.on("ReceiveChessMove", function (message) {
               console.log(message);
                var res = JSON.parse(message);
                var obj = document.getElementById(res[0].id);

                var nodeEnd = matrix[res[0].toi][res[0].toj];

                obj.style.top = nodeEnd.top + 'px';
                obj.style.left = nodeEnd.left + 'px';

                matrix[res[0].fromi][res[0].fromj].id = "";
                matrix[res[0].toi][res[0].toj].id = res[0].id;
                if (res.length >1){
                    var temp = document.getElementById(res[1].id);
                    temp.style.display = "none";
                }
            });
            connection.start();
        }
    });
</script>
